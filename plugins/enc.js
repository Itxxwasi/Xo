const { cmd } = require('../command');
const JsConfuser = require('js-confuser');

cmd({
  pattern: "enc",
  alias: ["encrypt"],
  desc: "Encrypt a .js file using hard obfuscation",
  category: "tools",
  react: "üîê",
  filename: __filename
}, async (dybytech, m, text, { Owner }) => {
  if (!Owner) return m.reply('‚ùå ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');

  const quoted = m.quoted || m.message?.extendedTextMessage?.contextInfo?.quotedMessage;
  const fileInfo = quoted?.documentMessage;

  if (!fileInfo || !fileInfo.fileName.endsWith('.js')) {
    return m.reply('‚ùå ·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä .·¥äÍú± Íú∞…™ ü·¥á ·¥õ·¥è ·¥á…¥·¥Ñ Ä è·¥ò·¥õ.');
  }

  try {
    const fileName = fileInfo.fileName;
    const docBuffer = await m.quoted.download();
    if (!docBuffer) return m.reply('‚ùå ·¥Ñ·¥Ä…¥‚Äô·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö Íú∞…™ ü·¥á.');

    await dybytech.sendMessage(m.chat, {
      react: { text: 'üîê', key: m.key }
    });

    const obfuscatedCode = await JsConfuser.obfuscate(docBuffer.toString(), {
      target: "node",
      preset: "high",
      compact: true,
      minify: true,
      flatten: true,
      identifierGenerator: () => {
        const base = "Á¥†DYBYÊô¥TECHÊô¥";
        const randomString = (len) => Array(len).fill('').map(() =>
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random() * 52))
        ).join('');
        return base.replace(/[^a-zA-Z]/g, "") + randomString(2);
      },
      renameVariables: true,
      renameGlobals: true,
      stringEncoding: true,
      stringSplitting: 0.0,
      stringConcealing: true,
      stringCompression: true,
      duplicateLiteralsRemoval: 1.0,
      shuffle: { hash: 0.0, true: 0.0 },
      stack: true,
      controlFlowFlattening: 1.0,
      opaquePredicates: 0.9,
      deadCode: 0.0,
      dispatcher: true,
      rgf: false,
      calculator: true,
      hexadecimalNumbers: true,
      movedDeclarations: true,
      objectExtraction: true,
      globalConcealing: true
    });

    await dybytech.sendMessage(m.chat, {
      document: Buffer.from(obfuscatedCode, 'utf-8'),
      mimetype: 'application/javascript',
      fileName,
      caption: `‚úÖ *s·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±“ì·¥ú ü ü è ·¥á…¥·¥Ñ Ä è·¥ò·¥õ·¥á·¥Ö*\n‚Ä¢ ·¥õ è·¥ò·¥á:  ú·¥Ä Ä·¥Ö ·¥Ñ·¥è·¥Ö·¥á\n‚Ä¢ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è: @·¥Ö è ô è ·¥õ·¥á·¥Ñ ú`,
    }, { quoted: m });

  } catch (error) {
    console.error('Encryption Error:', error);
    await m.reply(`‚ùå *·¥á Ä Ä·¥è Ä:* ${error.message}`);
  }
});
