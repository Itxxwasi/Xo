const axios = require("axios");
const { cmd } = require("../command");

cmd({
  pattern: "npm",
  desc: "Search for a package on npm.",
  react: 'üì¶',
  category: "convert",
  filename: __filename,
  use: ".npm <package-name>"
}, async (conn, mek, msg, { from, args, reply }) => {
  try {
    // Check if a package name is provided
    if (!args.length) {
      return reply("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á …¥·¥Ä·¥ç·¥á ·¥è“ì ·¥õ ú·¥á …¥·¥ò·¥ç ·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥á·¥Ä Ä·¥Ñ ú “ì·¥è Ä. ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .…¥·¥ò·¥ç ·¥áx·¥ò Ä·¥áss");
    }

    const packageName = args.join(" ");
    const apiUrl = `https://registry.npmjs.org/${encodeURIComponent(packageName)}`;

    // Fetch package details from npm registry
    const response = await axios.get(apiUrl);
    if (response.status !== 200) {
      throw new Error("Package not found or an error occurred.");
    }

    const packageData = response.data;
    const latestVersion = packageData["dist-tags"].latest;
    const description = packageData.description || "No description available.";
    const npmUrl = `https://www.npmjs.com/package/${packageName}`;
    const license = packageData.license || "Unknown";
    const repository = packageData.repository ? packageData.repository.url : "Not available";

    // Create the response message
    const message = `
*ùêåùêÑùêÜùêÄùêãùêéùêÉùêéùêç-ùêåùêÉ ùêçùêèùêå ùêíùêÑùêÄùêëùêÇùêá*

*üî∞ …¥·¥ò·¥ç ·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á:* ${packageName}
*üìÑ ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥:* ${description}
*‚è∏Ô∏è  ü·¥Äs·¥õ ·¥†·¥á Äs…™·¥è…¥:* ${latestVersion}
*ü™™  ü…™·¥Ñ·¥á…¥s·¥á:* ${license}
*ü™©  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è:* ${repository}
*üîó …¥·¥ò·¥ç ·¥ú Ä ü:* ${npmUrl}

> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú`;

    // Send the message
    await conn.sendMessage(from, { text: message }, { quoted: mek });

  } catch (error) {
    console.error("Error:", error);

    // Send detailed error logs to WhatsApp
    const errorMessage = `
*‚ùå NPM Command Error Logs*

*Error Message:* ${error.message}
*Stack Trace:* ${error.stack || "Not available"}
*Timestamp:* ${new Date().toISOString()}
`;

    await conn.sendMessage(from, { text: errorMessage }, { quoted: mek });
    reply("An error occurred while fetching the npm package details.");
  }
});
