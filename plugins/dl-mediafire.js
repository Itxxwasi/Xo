const axios = require("axios");
const { cmd } = require("../command");

cmd({
  pattern: "mediafire",
  alias: ["mfire", "mfdownload"],
  react: 'üì•',
  desc: "Download files from MediaFire",
  category: "download",
  use: ".mediafire <MediaFire URL>",
  filename: __filename
}, async (conn, mek, m, { from, reply, args }) => {
  try {
    const url = args[0];
    if (!url || !url.includes("mediafire.com")) {
      return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä“ì…™ Ä·¥á ·¥ú Ä ü\n·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥ç·¥á·¥Ö…™·¥Ä“ì…™ Ä·¥á https://www.mediafire.com/file/...");
    }

    await conn.sendMessage(from, { react: { text: '‚è≥', key: m.key } });

    const apiUrl = `https://apis.davidcyriltech.my.id/mediafire?url=${encodeURIComponent(url)}`;
    const { data } = await axios.get(apiUrl);

    if (!data || !data.downloadLink) {
      return reply("‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú “ì…™ ü·¥á …™…¥“ì·¥è. …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ú Ä ü ·¥è Ä ·¥Ä·¥ò…™ ·¥á Ä Ä·¥è Ä.");
    }

    await reply(`üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ “ì…™ ü·¥á (${data.size})...`);

    const fileResponse = await axios.get(data.downloadLink, { responseType: 'arraybuffer' });
    const fileBuffer = Buffer.from(fileResponse.data);

    const messageOptions = {
      document: fileBuffer,
      fileName: data.fileName,
      mimetype: data.mimeType,
      caption: `*·¥ç·¥á·¥Ö…™·¥Ä“ì…™ Ä·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö*\n\nüìÑ *Size:* ${data.size}\n\n> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú`
    };

    await conn.sendMessage(from, messageOptions, { quoted: mek });
    await conn.sendMessage(from, { react: { text: '‚úÖ', key: m.key } });

  } catch (error) {
    console.error("MediaFire Error:", error);
    reply("‚ùå Failed to download file. Please try again later.");
    await conn.sendMessage(from, { react: { text: '‚ùå', key: m.key } });
  }
});
