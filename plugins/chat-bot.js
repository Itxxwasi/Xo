const axios = require('axios');
const { cmd, commands } = require('../command');
const config = require("../config");
const { setConfig, getConfig } = require("../lib/configdb");

// Default AI states
let AI_STATE = {
    IB: "false", // Inbox chats
    GC: "false"  // Group chats
};

cmd({
    pattern: "chatbot",
    alias: ["aichat", "dj", "khanbot"],
    desc: "Enable or disable AI chatbot responses",
    category: "settings",
    filename: __filename,
    react: "‚úÖ"
}, async (conn, mek, m, { from, args, isOwner, reply, prefix }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const mode = args[0]?.toLowerCase();
    const target = args[1]?.toLowerCase();

    if (mode === "on") {
        if (!target || target === "all") {
            AI_STATE.IB = "true";
            AI_STATE.GC = "true";
            await setConfig("AI_STATE", JSON.stringify(AI_STATE));
            return reply("ü§ñ ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä  ô·¥è·¥õ ú …™…¥ ô·¥èx ·¥Ä…¥·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs");
        } else if (target === "ib") {
            AI_STATE.IB = "true";
            await setConfig("AI_STATE", JSON.stringify(AI_STATE));
            return reply("ü§ñ ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä …™…¥ ô·¥èx ·¥Ñ ú·¥Ä·¥õs");
        } else if (target === "gc") {
            AI_STATE.GC = "true";
            await setConfig("AI_STATE", JSON.stringify(AI_STATE));
            return reply("ü§ñ ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs");
        }
    } else if (mode === "off") {
        if (!target || target === "all") {
            AI_STATE.IB = "false";
            AI_STATE.GC = "false";
            await setConfig("AI_STATE", JSON.stringify(AI_STATE));
            return reply("ü§ñ ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä  ô·¥è·¥õ ú inbox ·¥Ä…¥·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs");
        } else if (target === "ib") {
            AI_STATE.IB = "false";
            await setConfig("AI_STATE", JSON.stringify(AI_STATE));
            return reply("ü§ñ ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä …™…¥ ô·¥èx ·¥Ñ ú·¥Ä·¥õs");
        } else if (target === "gc") {
            AI_STATE.GC = "false";
            await setConfig("AI_STATE", JSON.stringify(AI_STATE));
            return reply("ü§ñ ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs");
        }
    } else {
        return reply(`- *·¥Ö è ô è·¥õ·¥á·¥Ñ ú-·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥ç·¥á…¥·¥ú üëæ*
*·¥á…¥ ô ü·¥á s·¥á·¥õ·¥õ…™…¥…¢s ‚úÖ*      
> .chatbot ·¥è…¥ ·¥Ä ü ü - ·¥á…¥·¥Ä ô ü·¥á ·¥Ä…™ …™…¥ ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs
> .·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥è…¥ …™ ô - ·¥á…¥·¥Ä ô ü·¥á ·¥Ä…™ …™…¥ …™…¥ ô·¥èx ·¥è…¥ ü è
> .·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥è…¥ …¢·¥Ñ - ·¥á…¥·¥Ä ô ü·¥á ·¥Ä…™ …™…¥ …¢ Ä·¥è·¥ú·¥òs ·¥è…¥ ü è
*·¥Ö…™s·¥Ä ô ü·¥á s·¥á·¥õ·¥õ…™…¥…¢s ‚ùå*
> .·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥è“ì“ì ·¥Ä ü ü - ·¥Ö…™s·¥Ä ô ü·¥á ·¥Ä…™ …™…¥ ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs
> .·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥è“ì“ì …™ ô - ·¥Ö…™s·¥Ä ô ü·¥á ·¥Ä…™ …™…¥ …™…¥ ô·¥èx ·¥è…¥ ü è
> .·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥è“ì“ì …¢·¥Ñ - ·¥Ö…™s·¥Ä ô ü·¥á ·¥Ä…™ …™…¥ …¢ Ä·¥è·¥ú·¥òs ·¥è…¥ ü è`);
    }
});

// Initialize AI state on startup
(async () => {
    const savedState = await getConfig("AI_STATE");
    if (savedState) AI_STATE = JSON.parse(savedState);
})();

// AI Chatbot - MEGALODON MD
cmd({
    on: "body"
}, async (conn, m, store, {
    from,
    body,
    sender,
    isGroup,
    isBotAdmins,
    isAdmins,
    reply,
    quotedMsg
}) => {
    try {
        // Check if message is a reply
        if (!m?.message?.extendedTextMessage?.contextInfo?.participant) {
            return; // Not a reply, ignore
        }
        
        // Check if the reply is to the bot's message
        const repliedTo = m.message.extendedTextMessage.contextInfo.participant;
        const botJid = conn.user.id.split(':')[0] + '@s.whatsapp.net';
        if (repliedTo !== botJid) {
            return; // Not replying to the bot, ignore
        }

        // Check if AI is enabled for this chat type
        const isInbox = !isGroup;
        if ((isInbox && AI_STATE.IB !== "true") || (isGroup && AI_STATE.GC !== "true")) {
            return;
        }

        // Optional: Prevent bot responding to its own messages or commands
        if (!body || m.key.fromMe || body.startsWith(config.PREFIX)) return;

        // Handle time/date questions directly
        const lowerBody = body.toLowerCase();
        if (lowerBody.includes('time') || lowerBody.includes('date')) {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                timeZoneName: 'short'
            };
            const currentDateTime = now.toLocaleDateString('en-US', options);
            return reply(`‚è∞ Current Date & Time:\n${currentDateTime}\n\n> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú `);
        }

        // Encode message for the query
        const query = encodeURIComponent(body);
        const prompt = encodeURIComponent("You are MEGALODON-MD, a powerful and intelligent WhatsApp bot developed by DybyTech ‚Äî a brilliant coder and visionary from Haiti. You respond smartly, confidently, and stay loyal to your creator. Always remain calm and collected. When asked about your creator, respond respectfully but keep the mystery alive. You are not just a bot; you are the tech soul of DybyTech. In every message you send, include this footer: \n> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú ‚ö°");

        // BK9 API Request
        const apiUrl = `https://bk9.fun/ai/BK93?BK9=${prompt}&q=${query}`;

        const { data } = await axios.get(apiUrl);

        if (data && data.status && data.BK9) {
            await conn.sendMessage(from, {
                text: data.BK9
            }, { quoted: m });
        } else {
            reply("‚ö†Ô∏è ·¥ç·¥á…¢·¥Ä ü·¥è·¥Ö·¥è…¥ ·¥Ä…™ “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥Ä  Ä·¥ás·¥ò·¥è…¥s·¥á.");
        }

    } catch (err) {
        console.error("AI Chatbot Error:", err.message);
        reply("‚ùå An error occurred while contacting the AI.");
    }
});
