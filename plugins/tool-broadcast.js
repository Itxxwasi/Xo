const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions2');
const { writeFileSync } = require('fs');
const path = require('path');

cmd({
  pattern: "broadcast",
  category: "group",
  desc: "Bot makes a broadcast in all groups",
  filename: __filename,
  use: "<·¥õ·¥áx·¥õ “ì·¥è Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ.>"
}, async (conn, mek, m, { q, isGroup, isAdmins, reply }) => {
  try {
    if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs!");
    if (!isAdmins) return reply("‚ùå  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò!");

    if (!q) return reply("‚ùå ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™…¥ ·¥Ä ü ü …¢ Ä·¥è·¥ú·¥òs!");

    let allGroups = await conn.groupFetchAllParticipating();
    let groupIds = Object.keys(allGroups); // Extract group IDs

    reply(`üì¢ s·¥á…¥·¥Ö…™…¥…¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è ${groupIds.length} …¢ Ä·¥è·¥ú·¥òs...\n‚è≥ ·¥ás·¥õ…™·¥ç·¥Ä·¥õ·¥á·¥Ö ·¥õ…™·¥ç·¥á: ${groupIds.length * 1.5} seconds`);

    for (let groupId of groupIds) {
      try {
        await sleep(1500); // Avoid rate limits
        await conn.sendMessage(groupId, { text: q }); // Sends only the provided text
      } catch (err) {
        console.log(`‚ùå Failed to send broadcast to ${groupId}:`, err);
      }
    }

    return reply(`‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á…¥·¥õ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è ${groupIds.length} …¢ Ä·¥è·¥ú·¥òs!`);
    
  } catch (err) {
    await m.error(`‚ùå Error: ${err}\n\nCommand: broadcast`, err);
  }
});
