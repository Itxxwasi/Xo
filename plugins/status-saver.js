const { cmd } = require("../command");
const { downloadMediaMessage } = require("../lib/msg");

// ‚úÖ Define regex pattern using `new RegExp`
const regexSend = new RegExp(`\\b(send|share|snd|give|save|sendme|forward)\\b`, "i");

// ‚úÖ Save WhatsApp Status (Manual Command)
cmd({
  pattern: "ssave",
  desc: "Save WhatsApp status",
  category: "utility",
  filename: __filename,
}, async (conn, mek, m, { sender, reply }) => {
  try {
    if (!m.quoted) return reply("* Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥° ú·¥Ä·¥õs·¥Ä·¥ò·¥ò s·¥õ·¥Ä·¥õ·¥ús ·¥õ·¥è s·¥Ä·¥†·¥á …™·¥õ.*");

    const { msg, type } = m.quoted;
    if (!msg || !type) return reply("*·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs …¥·¥è ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ ·¥õ·¥è s·¥Ä·¥†·¥á.*");

    const mediaTypes = ["imageMessage", "videoMessage", "audioMessage", "stickerMessage", "documentMessage"];

    if (mediaTypes.includes(type)) {
      const mediaBuffer = await m.quoted.download();
      if (!mediaBuffer) return reply("*Failed to download media.*");
      await conn.sendMessage(sender, { [type.replace("Message", "")]: mediaBuffer }, { quoted: mek });
    } else if (type === "conversation" || type === "extendedTextMessage") {
      await conn.sendMessage(sender, { text: msg.text || msg }, { quoted: mek });
    }
  } catch (e) {
    console.error("‚ùå Error while saving status:", e);
  }
});

// ‚úÖ Auto-Detect and Forward Based on Regex (Now Matches Your Example)
cmd({ on: "quoted" }, async (conn, mek, m, { text, sender }) => {
  try {
    if (!m.quoted || !text) return;

    console.log(`üì•  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö ·¥õ·¥áx·¥õ: ${text}`); // Debugging log
    console.log(`üîç  Ä·¥á…¢·¥áx ·¥ç·¥Ä·¥õ·¥Ñ ú: ${regexSend.test(text.toLowerCase())}`); // Debugging log

    if (!regexSend.test(text.toLowerCase())) return;

    const { msg, type } = m.quoted;
    if (!msg || !type) return;

    const mediaTypes = ["imageMessage", "videoMessage", "audioMessage", "stickerMessage", "documentMessage"];

    if (mediaTypes.includes(type)) {
      const mediaBuffer = await m.quoted.download();
      if (!mediaBuffer) return reply("*Failed to download media.*");
      await conn.sendMessage(sender, { [type.replace("Message", "")]: mediaBuffer }, { quoted: mek });
    } else if (type === "conversation" || type === "extendedTextMessage") {
      await conn.sendMessage(sender, { text: msg.text || msg }, { quoted: mek });
    }
  } catch (e) {
    console.error("‚ùå ·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á:", e);
  }
});
