const { cmd } = require('../command');
const { sleep } = require('../lib/functions');

cmd({
  pattern: "bcgroup",
  alias: ["bcgc"],
  desc: "Broadcast a message to all groups (owner only)",
  category: "owner",
  react: "üì¢",
  filename: __filename
}, async (conn, m, msg, { text, prefix, command, isCreator, reply, isOwner }) => {
  try {
    if (!isCreator && !isOwner) return reply("‚ùå *·¥è…¥ ü è  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.*");

    if (!text) return reply(`‚ùó *·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ.*\n\nExample: ${prefix + command}  ú·¥á ü ü·¥è ·¥á·¥†·¥á Ä è·¥è…¥·¥á!`);

    const groupsData = await conn.groupFetchAllParticipating();
    const groups = Object.entries(groupsData).map(entry => entry[1]);
    const groupJids = groups.map(group => group.id);

    reply(`üì¢ s·¥á…¥·¥Ö…™…¥…¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è *${groupJids.length}* …¢ Ä·¥è·¥ú·¥òs...\n‚è≥ ·¥ás·¥õ…™·¥ç·¥Ä·¥õ·¥á·¥Ö ·¥õ…™·¥ç·¥á: ~${(groupJids.length * 1.5).toFixed(1)} seconds`);

    for (const jid of groupJids) {
      await sleep(1500);

      const message = `\`\`\`\n${text}\n\`\`\`\n\n_ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì Ä·¥è·¥ç ·¥è·¥°…¥·¥á Ä_`;

      await conn.sendMessage(jid, {
        text: message,
        contextInfo: {
          externalAdReply: {
            showAdAttribution: true,
            title: 'Broadcast by Owner',
            body: `To ${groupJids.length} groups`,
            mediaType: 1,
            thumbnailUrl: 'https://files.catbox.moe/iuexn4.jpg',
            sourceUrl: global.link,
            renderLargerThumbnail: true
          }
        }
      });
    }

    reply(`‚úÖ * ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥á…¥·¥õ ·¥õ·¥è ${groupJids.length} …¢ Ä·¥è·¥ú·¥òs s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è.*`);
  } catch (e) {
    console.error(e);
    reply("‚ùå *An error occurred while broadcasting.*");
  }
});
