const config = require('../config');
const { cmd } = require('../command');
const DY_SCRAP = require('@dark-yasiya/scrap');
const dy_scrap = new DY_SCRAP();

function replaceYouTubeID(url) {
    const regex = /(?:youtube\.com\/(?:.*v=|.*\/)|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
}

cmd({
    pattern: "play",
    alias: ["mp3", "ytmp3"],
    react: "üéµ",
    desc: "Download Ytmp3",
    category: "download",
    use: ".song <Text or YT URL>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return await reply("‚ùå Please provide a Query or Youtube URL!");

        let id = q.startsWith("https://") ? replaceYouTubeID(q) : null;
        let videoData;

        if (!id) {
            const searchResults = await dy_scrap.ytsearch(q);
            if (!searchResults?.results?.length) return await reply("‚ùå No results found!");
            videoData = searchResults.results[0];
            id = videoData.videoId;
        } else {
            const searchResults = await dy_scrap.ytsearch(`https://youtube.com/watch?v=${id}`);
            if (!searchResults?.results?.length) return await reply("‚ùå Failed to fetch video!");
            videoData = searchResults.results[0];
        }

        // Pr√©-chargement du MP3
        const preloadedAudio = dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);

        const { url, title, image, timestamp, ago, views, author } = videoData;

        let info = `üçÑ *ùöÇùôæùôΩùô∂ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ùô¥ùöÅ* üçÑ\n\n` +
            `üéµ *·¥õ…™·¥õ ü·¥á:* ${title || "Unknown"}\n` +
            `‚è≥ *·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:* ${timestamp || "Unknown"}\n` +
            `üëÄ *·¥†…™·¥á·¥°s:* ${views || "Unknown"}\n` +
            `üåè * Ä·¥á ü·¥á·¥Äs·¥á ·¥Ä…¢·¥è:* ${ago || "Unknown"}\n` +
            `üë§ *·¥Ä·¥ú·¥õ ú·¥è Ä:* ${author?.name || "Unknown"}\n` +
            `üñá *·¥ú Ä ü:* ${url || "Unknown"}\n\n` +
            `üîΩ * Ä·¥á·¥ò ü è ·¥°…™·¥õ ú  è·¥è·¥ú Ä ·¥Ñ ú·¥è…™·¥Ñ·¥á:*\n` +
            `1.1 *·¥Ä·¥ú·¥Ö…™·¥è ·¥õ è·¥ò·¥á* üéµ\n` +
            `1.2 *·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ ·¥õ è·¥ò·¥á* üìÅ\n\n` +
            `> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú*`;

        const sentMsg = await conn.sendMessage(from, { image: { url: image }, caption: info }, { quoted: mek });
        const messageID = sentMsg.key.id;
        await conn.sendMessage(from, { react: { text: 'üé∂', key: sentMsg.key } });

        // Gestion unique de r√©ponse utilisateur
        const listener = async (messageUpdate) => {
            try {
                const mekInfo = messageUpdate?.messages[0];
                if (!mekInfo?.message) return;

                const messageType = mekInfo?.message?.conversation || mekInfo?.message?.extendedTextMessage?.text;
                const isReplyToSentMsg = mekInfo?.message?.extendedTextMessage?.contextInfo?.stanzaId === messageID;

                if (!isReplyToSentMsg) return;

                conn.ev.off('messages.upsert', listener); // retire le listener apr√®s premi√®re r√©ponse

                let userReply = messageType.trim();
                let msg;
                let type;
                let response = await preloadedAudio;

                const downloadUrl = response?.result?.download?.url;
                if (!downloadUrl) return await reply("‚ùå ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!");

                if (userReply === "1.1") {
                    msg = await conn.sendMessage(from, { text: "‚è≥ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢..." }, { quoted: mek });
                    type = { audio: { url: downloadUrl }, mimetype: "audio/mpeg" };
                } else if (userReply === "1.2") {
                    msg = await conn.sendMessage(from, { text: "‚è≥ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢..." }, { quoted: mek });
                    type = {
                        document: { url: downloadUrl },
                        fileName: `${title}.mp3`,
                        mimetype: "audio/mpeg",
                        caption: title
                    };
                } else {
                    return await reply("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥è…™·¥Ñ·¥á!  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú 1.1 ·¥è Ä 1.2.");
                }

                await conn.sendMessage(from, type, { quoted: mek });
                await conn.sendMessage(from, { text: '‚úÖ ·¥ç·¥á·¥Ö…™·¥Ä ·¥ú·¥ò ü·¥è·¥Ä·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ‚úÖ', edit: msg.key });

            } catch (error) {
                console.error(error);
                await reply(`‚ùå *An error occurred while processing:* ${error.message || "Error!"}`);
            }
        };

        conn.ev.on('messages.upsert', listener);

    } catch (error) {
        console.error(error);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        await reply(`‚ùå *An error occurred:* ${error.message || "Error!"}`);
    }
});
