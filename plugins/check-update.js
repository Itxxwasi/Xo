const axios = require('axios');
const os = require('os');
const fs = require('fs');
const path = require('path');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');

cmd({
  pattern: 'version',
  alias: ["changelog", "cupdate", "checkupdate"],
  react: 'üöÄ',
  desc: "Check bot's version, system stats, and update info.",
  category: 'info',
  filename: __filename
}, async (conn, mek, m, {
  from, sender, pushname, reply
}) => {
  try {
    // Read local version data
    const localVersionPath = path.join(__dirname, '../data/version.json');
    let localVersion = 'Unknown';
    let changelog = 'No changelog available.';
    if (fs.existsSync(localVersionPath)) {
      const localData = JSON.parse(fs.readFileSync(localVersionPath));
      localVersion = localData.version;
      changelog = localData.changelog;
    }

    // Fetch latest version data from GitHub
    const rawVersionUrl = 'https://raw.githubusercontent.com/DybyTech/MEGALODON-MD/main/data/version.json';
    let latestVersion = 'Unknown';
    let latestChangelog = 'No changelog available.';
    try {
      const { data } = await axios.get(rawVersionUrl);
      latestVersion = data.version;
      latestChangelog = data.changelog;
    } catch (error) {
      console.error('Failed to fetch latest version:', error);
    }

    // Count total plugins
    const pluginPath = path.join(__dirname, '../plugins');
    const pluginCount = fs.readdirSync(pluginPath).filter(file => file.endsWith('.js')).length;

    // Count total registered commands
    const totalCommands = commands.length;

    // System info
    const uptime = runtime(process.uptime());
    const ramUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
    const totalRam = (os.totalmem() / 1024 / 1024).toFixed(2);
    const hostName = os.hostname();
    const lastUpdate = fs.statSync(localVersionPath).mtime.toLocaleString();

    // GitHub stats
    const githubRepo = 'https://github.com/DybyTech/MEGALODON-MD';

    // Check update status
    let updateMessage = `‚úÖ  è·¥è·¥ú Ä ·¥ç·¥á…¢·¥Ä ü·¥è·¥Ö·¥è…¥ …™s ·¥ú·¥ò-·¥õ·¥è-·¥Ö·¥Ä·¥õ·¥á!`;
    if (localVersion !== latestVersion) {
      updateMessage = `üöÄ  è·¥è·¥ú Ä  ô·¥è·¥õ …™s ·¥è·¥ú·¥õ·¥Ö·¥Ä·¥õ·¥á·¥Ö!
üîπ *·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥†·¥á Äs…™·¥è…¥:* ${localVersion}
üîπ * ü·¥Ä·¥õ·¥ás·¥õ ·¥†·¥á Äs…™·¥è…¥:* ${latestVersion}

·¥ús·¥á *.·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á* ·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.`;
    }

    const statusMessage = `üåü *…¢·¥è·¥è·¥Ö ${new Date().getHours() < 12 ? 'Morning' : 'Night'}, ${pushname}!* üåü\n\n` +
      `üìå * ô·¥è·¥õ …¥·¥Ä·¥ç·¥á:* ùêÜùêéùêìùêÄùêë ùêóùêåùêÉ\nüîñ *·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥†·¥á Äs…™·¥è…¥:* ${localVersion}\nüì¢ * ü·¥Ä·¥õ·¥ás·¥õ ·¥†·¥á Äs…™·¥è…¥:* ${latestVersion}\nüìÇ *·¥õ·¥è·¥õ·¥Ä ü ·¥ò ü·¥ú…¢…™…¥s:* ${pluginCount}\nüî¢ *·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:* ${totalCommands}\n\n` +
      `üíæ *s ès·¥õ·¥á·¥ç …™…¥“ì·¥è:*\n‚è≥ *·¥ú·¥ò·¥õ…™·¥ç·¥á:* ${uptime}\nüìü * Ä·¥Ä·¥ç ·¥ús·¥Ä…¢·¥á:* ${ramUsage}MB / ${totalRam}MB\n‚öôÔ∏è * ú·¥ès·¥õ …¥·¥Ä·¥ç·¥á:* ${hostName}\nüìÖ * ü·¥Äs·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á:* ${lastUpdate}\n\n` +
      `üìù *·¥Ñ ú·¥Ä…¥…¢·¥á ü·¥è…¢:*\n${latestChangelog}\n\n` +
      `‚≠ê *…¢…™·¥õ ú·¥ú ô  Ä·¥á·¥ò·¥è:* ${githubRepo}\nüë§ *·¥è·¥°…¥·¥á Ä:* [DybyTech](https://github.com/DybyTech)\n\n${updateMessage}\n\nüöÄ * ú·¥á è! ·¥Ö·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è “ì·¥è Ä·¥ã & s·¥õ·¥Ä Ä ·¥õ ú·¥á  Ä·¥á·¥ò·¥è!*`;

    // Send the status message with an image
    await conn.sendMessage(from, {
      image: { url: 'https://files.catbox.moe/w1l8b0.jpg' },
      caption: statusMessage,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363401658098220@newsletter',
          newsletterName: 'ùêåùêÑùêÜùêÄùêãùêéùêÉùêéùêç-ùêåùêÉ',
          serverMessageId: 143
        }
      }
    }, { quoted: mek });
  } catch (error) {
    console.error('Error fetching version info:', error);
    reply('‚ùå An error occurred while checking the bot version.');
  }
});
