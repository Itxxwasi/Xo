const config = require('../config');
const { cmd, commands } = require('../command');

const menuMap = {
    "1": "download",
    "2": "group",
    "3": "fun",
    "4": "owner",
    "5": "ai",
    "6": "anime",
    "7": "convert",
    "8": "other",
    "9": "reactions",
    "10": "main"
};

function getGreeting() {
    const hour = new Date().getHours();
    if (hour >= 5 && hour < 12) return "üåÖ …¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢";
    if (hour >= 12 && hour < 18) return "üåû …¢·¥è·¥è·¥Ö ·¥ÄÍú∞·¥õ·¥á Ä…¥·¥è·¥è…¥";
    return "üåô …¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢";
}
// M√©moire temporaire des derniers menus envoy√©s
let lastMenuMessage = {};

cmd({
    pattern: "menu2",
    react: "üëæ",
    desc: "get cmd list",
    category: "main",
    filename: __filename
},
async (conn, mek, m, {
    from, quoted, pushname, sender, reply
}) => {
    try {
        let menu = {};
        for (let i = 0; i < commands.length; i++) {
            if (commands[i].pattern && !commands[i].dontAddCommandList) {
                let cat = commands[i].category || 'other';
                if (!menu[cat]) menu[cat] = '';
                menu[cat] += `*‚îã* ${commands[i].pattern}\n`;
            }
        }

        let madeMenu = `*‚îå‚îÄ‚îÄ‚óÜ*
*‚îÇ „Äé ùêåùêÑùêÜùêÄùêãùêéùêÉùêéùêç-ùêåùêÉ „Äè*
*‚îî‚îÄ‚î¨‚óÜ*
*‚îå‚îÄ‚î§ ${getGreeting()} üí´*
*‚îÇ  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ*
*‚îÇ‚óì ·¥ús·¥á Ä : ${pushname}
*‚îÇ‚óì ·¥è·¥°…¥·¥á Ä : ${config.OWNER_NAME}*
*‚îÇ‚óì  ô·¥Ä…™ ü·¥á ès : ·¥ç·¥ú ü·¥õ…™ ·¥Ö·¥á·¥†…™·¥Ñ·¥á*
*‚îÇ‚óì ·¥õ è·¥ò·¥á : …¥·¥è·¥Ö·¥á·¥äs*
*‚îÇ‚óì ·¥Ö·¥á·¥† : ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú
*‚îÇ‚óì ·¥ç·¥è·¥Ö·¥á : private*
*‚îÇ‚óì ·¥ò Ä·¥á“ì…™x : „Äå ${config.PREFIX} „Äç
*‚îÇ‚óì ·¥†·¥á Äs…™·¥è…¥ : 1.0.0  ô·¥á·¥õ·¥Ä*
*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*

> *‚ï≠‚àò‚îÅ‚îÅ‚û£* *ùêåùêÑùêçùêî *
> *‚îÇ‚òÜ* ‚ù∂ *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ù∑ *…¢ Ä·¥è·¥ú·¥ò ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ù∏ *“ì·¥ú…¥ ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ùπ *·¥è·¥°…¥·¥á Ä ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ù∫ *·¥Ä…™ ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ùª *·¥Ä…¥…™·¥ç·¥á ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ùº *·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ùΩ *·¥è·¥õ ú·¥á Ä ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ùæ * Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥s ·¥ç·¥á…¥·¥ú*
> *‚îÇ‚òÜ* ‚ûì *·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú*
> *‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑*
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú*
`;

        let allMenus = ``;
        const orderedCategories = ['main', 'download', 'group', 'owner', 'convert', 'search', 'fun', 'ai', 'anime', 'other', 'reactions'];
        for (const cat of orderedCategories) {
            if (menu[cat]) {
                allMenus += `‚ï≠‚îÄ‚îÄ „Äê *${cat.toUpperCase()} MENU* „Äë ‚îÄ‚îÄ‚îÄ‚ïÆ\n${menu[cat]}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑\n\n`;
            }
        }

        let sent = await conn.sendMessage(
            from,
            {
                image: { url: `https://files.catbox.moe/roubzi.jpg` },
                caption: madeMenu + '\n\n_ Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥Ä …¥·¥ú·¥ç ô·¥á Ä (1‚Äì10) ·¥õ·¥è ·¥è·¥ò·¥á…¥ ·¥õ ú·¥Ä·¥õ ·¥ç·¥á…¥·¥ú._',
                contextInfo: {
                    mentionedJid: [sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363401051937059@newsletter',
                        newsletterName: 'ùêåùêÑùêÜùêÄùêãùêéùêÉùêéùêç-ùêåùêÉ',
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );

        // Save message ID
        lastMenuMessage[from] = sent.key.id;

    } catch (e) {
        console.error(e);
        reply(`‚ùå Error:\n${e}`);
    }
});

// √âcoute des r√©ponses √† `.menu2`
conn.ev.on("messages.upsert", async ({ messages }) => {
    try {
        let msg = messages[0];
        if (!msg.message || msg.key.fromMe || msg.key.remoteJid === 'status@broadcast') return;

        const from = msg.key.remoteJid;
        const reply_to = msg.message?.extendedTextMessage?.contextInfo?.stanzaId;

        // Si on r√©pond au menu envoy√©
        if (reply_to && lastMenuMessage[from] && reply_to === lastMenuMessage[from]) {
            let body = msg.message?.conversation || msg.message?.extendedTextMessage?.text || '';
            body = body.trim();
            if (menuMap[body]) {
                let category = menuMap[body];
                let cmds = commands.filter(cmd => cmd.category === category && cmd.pattern && !cmd.dontAddCommandList);
                if (!cmds.length) return conn.sendMessage(from, { text: `‚ùå …¥·¥è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös “ì·¥è·¥ú…¥·¥Ö …™…¥ *${category} ·¥ç·¥á…¥·¥ú*.` }, { quoted: msg });

                let text = `‚ï≠‚îÄ‚îÄ‚îÄ„Äî *${category.toUpperCase()} MENU* „Äï‚îÄ‚îÄ‚îÄ‚ïÆ\n`;
                for (let cmd of cmds) {
                    text += `‚îÉ‚óà ${cmd.pattern}\n`;
                }
                text += `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑\n> * Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è ${msg.pushName || 'User'}*`;

                await conn.sendMessage(from, { text }, { quoted: msg });
            }
        }
    } catch (err) {
        console.error("·¥á Ä Ä·¥è Ä …™…¥ ·¥ç·¥á…¥·¥ú  Ä·¥á·¥ò ü è  ú·¥Ä…¥·¥Ö ü·¥á Ä:", err);
    }
});
