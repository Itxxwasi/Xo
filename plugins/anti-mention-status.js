const { cmd } = require('../command')

// In-memory settings and counters
const antiMentionSettings = new Map()
const warnCounters = new Map()

// Enable anti-group-mention system
cmd({
  pattern: "antigpmention",
  alias: ["agpm"],
  desc: "Enable anti group status mention system.",
  react: "üîí",
  category: "group",
  filename: __filename
}, async (conn, mek, m, { from, isGroup, isAdmins, args, reply }) => {
  if (!isGroup) return reply("‚ùå This command can only be used in groups.")
  if (!isAdmins) return reply("‚ùå Only group admins can use this command.")

  const mode = (args[0] || "").toLowerCase()
  if (!["warn", "remove", "counter"].includes(mode))
    return reply("‚ö†Ô∏è Usage: .·¥Ä…¥·¥õ…™…¢·¥ò·¥ç·¥á…¥·¥õ…™·¥è…¥ [·¥°·¥Ä Ä…¥| Ä·¥á·¥ç·¥è·¥†·¥á|·¥Ñ·¥è·¥ú…¥·¥õ·¥á Ä]")

  antiMentionSettings.set(from, mode)
  reply(`‚úÖ ·¥Ä…¥·¥õ…™ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö …™…¥ *${mode.toUpperCase()}* ·¥ç·¥è·¥Ö·¥á.`)
})

// Disable anti-group-mention
cmd({
  pattern: "agpmoff",
  desc: "Disable anti group status mention system.",
  react: "üîï",
  category: "group",
  filename: __filename
}, async (conn, mek, m, { from, isGroup, isAdmins, reply }) => {
  if (!isGroup) return reply("‚ùå This command can only be used in groups.")
  if (!isAdmins) return reply("‚ùå Only group admins can use this command.")

  antiMentionSettings.delete(from)
  reply("üö´ Anti group mention has been *disabled*.")
})

// Check status
cmd({
  pattern: "agpmstatus",
  desc: "Check the current anti-group-mention status in this group.",
  react: "‚ÑπÔ∏è",
  category: "group",
  filename: __filename
}, async (conn, mek, m, { from, isGroup, reply }) => {
  if (!isGroup) return reply("‚ùå This command can only be used in groups.")

  const mode = antiMentionSettings.get(from)
  if (!mode) return reply("üîï ·¥Ä…¥·¥õ…™ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥á…¥·¥õ…™·¥è…¥ …™s *·¥Ö…™s·¥Ä ô ü·¥á·¥Ö* …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.")

  const emoji = mode === "warn" ? "‚ö†Ô∏è" : mode === "remove" ? "‚õî" : "üìä"
  reply(`${emoji} ·¥Ä…¥·¥õ…™ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥á…¥·¥õ…™·¥è…¥ …™s *·¥á…¥·¥Ä ô ü·¥á·¥Ö* …™…¥ *${mode.toUpperCase()}* ·¥ç·¥è·¥Ö·¥á.`)
})

// Listener on groupStatusMentionMessage
cmd({
  on: "messages.upsert",
  filename: __filename
}, async (conn, m, store, { ms, isGroup, sender, isAdmins }) => {
  try {
    if (!isGroup) return
    if (!ms?.message?.groupStatusMentionMessage) return
    if (isAdmins || ms.key.fromMe) return

    const mode = antiMentionSettings.get(m.chat)
    if (!mode) return

    const senderId = sender || ms.key.participant
    const keyMsg = ms.key

    if (mode === "remove") {
      await conn.groupParticipantsUpdate(m.chat, [senderId], "remove")
      await conn.sendMessage(m.chat, { delete: keyMsg })
      await conn.sendMessage(m.chat, {
        text: `‚õî @${senderId.split("@")[0]} has been removed for status mention.`,
        mentions: [senderId]
      })
    }

    else if (mode === "warn") {
      await conn.sendMessage(m.chat, { delete: keyMsg })
      await conn.sendMessage(m.chat, {
        text: `‚ö†Ô∏è @${senderId.split("@")[0]}, please avoid mentioning group status.`,
        mentions: [senderId]
      })
    }

    else if (mode === "counter") {
      const key = `${m.chat}:${senderId}`
      const current = (warnCounters.get(key) || 0) + 1
      warnCounters.set(key, current)
      const max = 3

      if (current >= max) {
        await conn.sendMessage(m.chat, {
          text: `‚õî @${senderId.split("@")[0]} removed after ${max} warnings.`,
          mentions: [senderId]
        })
        await conn.groupParticipantsUpdate(m.chat, [senderId], "remove")
        await conn.sendMessage(m.chat, { delete: keyMsg })
        warnCounters.delete(key)
      } else {
        await conn.sendMessage(m.chat, {
          text: `‚ö†Ô∏è @${senderId.split("@")[0]} warning ${current}/${max}`,
          mentions: [senderId]
        })
        await conn.sendMessage(m.chat, { delete: keyMsg })
      }
    }
  } catch (err) {
    console.error("AntiGPMention error:", err)
  }
})
